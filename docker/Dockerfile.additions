ARG BASE_IMAGE=ubuntu:22.04
FROM $BASE_IMAGE


# Ubuntu dependencies
RUN --mount=type=cache,target=/var/cache/apt \
    apt-get update && apt-get install -y \
    libzmq3-dev \
    libqt5core5a

# ROS dependencies
RUN --mount=type=cache,target=/var/cache/apt \
    apt-get update && apt-get install -y \
    ros-humble-behaviortree-cpp-v3 \
    ros-humble-pcl-ros \
    ros-humble-zed-msgs \
    ros-humble-nmea-msgs \
    ros-humble-geographic-msgs \
    ros-humble-point-cloud-transport \
    ros-humble-robot-localization \
    ros-humble-point-cloud-transport-plugins \
    ros-humble-ffmpeg-image-transport \
    ros-humble-imu-tools \
    ros-humble-cob-msgs \
    ros-humble-cob-srvs \
    ros-humble-cob-actions

# Isaac ROS dependencies
RUN --mount=type=cache,target=/var/cache/apt \
    apt-get update && apt-get install -y \
    ros-humble-isaac-common \
    ros-humble-isaac-ros-gxf \
    ros-humble-isaac-ros-managed-nitros \
    ros-humble-isaac-ros-nitros-image-type \
    ros-humble-isaac-ros-visual-slam-interfaces \
    ros-humble-isaac-ros-h264-decoder \
    ros-humble-isaac-ros-launch-utils \
    ros-humble-isaac-ros-test \
    ros-humble-isaac-ros-dnn-image-encoder \
    ros-humble-isaac-ros-triton \
    ros-humble-isaac-ros-unet \ 
    ros-humble-isaac-ros-detectnet \
    ros-humble-isaac-ros-peoplesemseg-models-install \
    ros-humble-isaac-ros-peoplenet-models-install \
    ros-humble-isaac-ros-test-cmake \
    ros-humble-isaac-ros-examples \
    ros-humble-isaac-ros-zed \
    ros-humble-isaac-ros-nitros-point-cloud-type \
    ros-humble-gxf-isaac-localization \
    ros-humble-gxf-isaac-flatscan-localization \
    ros-humble-gxf-isaac-cuda \
    ros-humble-gxf-isaac-utils \
    ros-humble-isaac-ros-nitros-flat-scan-type \
    ros-humble-isaac-ros-nitros-pose-cov-stamped-type \
    ros-humble-gxf-isaac-ros-cuda

# Livox Lidar dependencies
RUN git clone https://github.com/Livox-SDK/Livox-SDK2.git && \
    cd Livox-SDK2 && \
    mkdir build && \
    cd build && \
    cmake .. && make -j4 && \
    make install && \
    echo "/usr/local/lib" > /etc/ld.so.conf.d/livox.conf && \
    ldconfig

# Micro-XRCE-DDS-Agent dependencies
RUN git clone -b v2.4.3 https://github.com/eProsima/Micro-XRCE-DDS-Agent.git && \
    cd Micro-XRCE-DDS-Agent && \
    mkdir build && \
    cd build && \
    cmake .. && \
    make -j4 && \
    make install && \
    ldconfig /usr/local/lib/

# AWS SDK C++ dependencies
RUN git clone --recurse-submodules https://github.com/aws/aws-sdk-cpp && \
    cd aws-sdk-cpp && \
    mkdir sdk_build && \
    cd sdk_build && \
    cmake -DCMAKE_BUILD_TYPE=Debug \
          -DENABLE_TESTING=OFF \
          -DCMAKE_PREFIX_PATH=/usr/local/ \
          -DCMAKE_INSTALL_PREFIX=/usr/local/ \
          -DBUILD_ONLY="s3" .. && \
    make -j4 && \
    make install && \
    ldconfig /usr/local/lib/

# Install ZED SDK - detect platform and install appropriate version
RUN CUDA_MAJOR=$(nvcc --version | grep -o -P ' release .{0,4}' | cut -d. -f1 | cut -d ' ' -f3) && \
    UBUNTU_RELEASE_YEAR=$(grep -o -P 'DISTRIB_RELEASE=.{0,2}' /etc/lsb-release | cut -d= -f2) && \
    ARCH=$(uname -m) && \
    if [ "$ARCH" = "aarch64" ]; then \
        # For Jetson/Tegra platform
        TEGRA_L4T_RELEASE="36.4" && \
        wget -q --no-check-certificate -O ZED_SDK_Linux.run https://stereolabs.sfo2.cdn.digitaloceanspaces.com/zedsdk/4.2/ZED_SDK_Tegra_L4T${TEGRA_L4T_RELEASE}_v4.2.2.zstd.run; \
    else \
        # For x86 platform
        wget -q -O ZED_SDK_Linux.run https://download.stereolabs.com/zedsdk/4.2/cu${CUDA_MAJOR}/ubuntu${UBUNTU_RELEASE_YEAR}; \
    fi && \
    chmod +x ./ZED_SDK_Linux.run && \
    ./ZED_SDK_Linux.run silent skip_od_module skip_python skip_drivers && \
    if [ "$ARCH" = "aarch64" ]; then \
        ln -sf /usr/lib/aarch64-linux-gnu/tegra/libv4l2.so.0 /usr/lib/aarch64-linux-gnu/libv4l2.so; \
    else \
        ln -sf /lib/x86_64-linux-gnu/libusb-1.0.so.0 /usr/lib/x86_64-linux-gnu/libusb-1.0.so; \
    fi && \
    rm -rf /usr/local/zed/resources/* && \
    rm -f ZED_SDK_Linux.run && \
    # ---- make it usable for everyone ---------------------------------
    chmod -R a+rX /usr/local/zed

# Add ZED camera permissions script to entrypoint additions
COPY scripts/zed-permissions.sh /usr/local/bin/scripts/entrypoint_additions/
RUN chmod +x /usr/local/bin/scripts/entrypoint_additions/zed-permissions.sh

# Set environment variables for ZED SDK
ENV ZEDROOT=/usr/local/zed
ENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/zed/lib
ENV CMAKE_PREFIX_PATH=$CMAKE_PREFIX_PATH:/usr/local/zed

# Make sure workspace is sourced if it exists
RUN echo '[ -f /workspaces/isaac_ros-dev/install/local_setup.bash ] && source /workspaces/isaac_ros-dev/install/local_setup.bash' | tee --append /etc/bash.bashrc
RUN echo '[ -f /workspaces/isaac_ros-dev/install/setup.bash ] && source /workspaces/isaac_ros-dev/install/setup.bash' | tee --append /etc/bash.bashrc

COPY middleware_profile[s]/cyclonedds.xml /usr/local/share/middleware_profiles/cyclonedds.xml
ENV RMW_IMPLEMENTATION=rmw_cyclonedds_cpp
ENV CYCLONEDDS_URI=/usr/local/share/middleware_profiles/cyclonedds.xml

